<html>

  <head>
    <meta charset='utf-8' />
    <meta
      name='viewport'
      content='width=device-width, initial-scale=1, shrink-to-fit=no'
    />
    <title>chat bot</title>
    <link
      href='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css'
      rel='stylesheet'
      integrity='sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC'
      crossorigin='anonymous'
    />
    <script 
      src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/js/all.min.js" 
      integrity="sha512-naukR7I+Nk6gp7p5TMA4ycgfxaZBJ7MO5iC3Fp6ySQyKFHOGfpkSZkYVWV5R7u7cfAicxanwYQ5D1e17EfJcMA==" 
      crossorigin="anonymous" 
      referrerpolicy="no-referrer"
    ></script>
    <link rel="stylesheet" href="/stylesheets/style.css">
    <script src="/main.js"></script>
  </head>

  <body class='d-flex flex-column h-100 bg-light'>
    {{> header}}
    <main role='main' class='flex-shrink-0'>
      <div class='album bg-light pt-5'>
        <div class='container'>
          <div class='pt-5'>
            {{> messages}}
            {{{body}}}
          </div>
        </div>
      </div>
    </main>
    {{> footer}}

    {{#if isAuthenticated}}
      <!-- 導入webchat視窗 -->
      <script>!(function () {

        /*
        // 暫存語音播放base64 url
        let voiceUrl

        // 建立audio html tag function
        function createAudioEle(base64Url){
          const widgetContainer = document.querySelector('.rw-widget-container')
          const audioNode = document.createElement('audio')
          audioNode.id = 'botResVoice'
          audioNode.src = `data:audio/wav;base64,${base64Url}`
          audioNode.muted = true
          audioNode.innerHTML = `<track src="botResponse_zh.vtt" kind="captions" />`
          widgetContainer.appendChild(audioNode)
        }
        */

        var title = document.querySelector("title").innerText;
        let e = document.createElement("script"),
          t = document.head || document.getElementsByTagName("head")[0];
        (e.src =
          "/index.js"),
          // Replace 1.x.x with the version that you want
          (e.async = !0),
          (e.onload = () => {
            window.WebChat.default(
              {
                customData: { "language": "zh", "userId": `{{user.cpnyId}}`},
                initPayload: "/get_started",
                socketUrl: "http://192.168.10.105:5005",
                // socketPath: "/socket.io/",
                profileAvatar: `https://i.imgur.com/iL6DE9f.png`,
                inputTextFieldHint: "請輸入內容....",
                //title: `{{user.chatbotName}}`,
                title: title,
                subtitle: "",
                params: { "storage": "session" },
                showFullScreenButton: true,
                showCloseButton: true,
                showMessageDate: true,
                // embedded: true,
                // add other props here
                /*
                onSocketEvent:{
                  // 機器人回覆事件
                  "bot_uttered":(res) => {
                    let botResText = '';

                    // 機器人回覆文字
                    if (res.text) {
                      const { text } = res;
                      botResText += text;
                    }

                    // 機器人回覆按鈕選項，將按鈕選項組進語音字串中
                    if (res.buttons) {
                      const { buttons } = res;
                      buttons.map((button, idx) => {
                        if (idx + 1 !== buttons.length) {
                          botResText += `選項${idx + 1}${button.title},`;
                        } else {
                          botResText += `選項${idx + 1}${button.title}`;
                        }
                        return button;
                      });
                    }

                    fetch('http://192.168.10.105:8010/tts/offline',{
                      method:'POST',
                      body:JSON.stringify({text:botResText}),
                      headers:{
                        'Content-Type': 'application/json'
                      }
                    })
                    .then(res => res.json())
                    .then(text2voice => {
                      // 暫存語音檔base64 url
                      voiceUrl = text2voice.result

                      // 如果有audio html tag就更換語音檔url
                      if(document.querySelector('#botResVoice')){
                        document.querySelector('#botResVoice').src = `data:audio/wav;base64,${text2voice.result}`
                      }
                    })
                  }
                },
                onWidgetEvent:{
                  // 開啟聊天室窗事件
                  "onChatOpen":() => {
                    // 創建語音播放按鈕
                    const voiceBtn = document.createElement('button');
                    voiceBtn.id = 'voiceBtn';

                    // 語音播放按鈕預設為關閉播放語音
                    voiceBtn.setAttribute('class','close')

                    // 語音播放按鈕點擊事件
                    voiceBtn.onclick = function clickVoiceBtn(e) {
                      // 如果按鈕原本是關閉狀態
                      if(e.target.classList.contains('close')){
                        // 如果沒有audio html tag就創建audio html tag
                        if(!document.querySelector('#botResVoice')){
                          createAudioEle(voiceUrl)
                        }
                        // 將audio html tag設定為自動播放且取消靜音
                        document.querySelector('#botResVoice').setAttribute('autoplay','')
                        document.querySelector('#botResVoice').muted = false
                      }else{
                        // 如果按鈕原本是開啟狀態，就刪除audio html tag
                        document.querySelector('#botResVoice').remove()
                      }

                      // 開啟或關閉按鈕狀態
                      e.target.classList.toggle('close');
                    };
                    // 因點擊開啟聊天室窗就會立刻執行，無法馬上取得document.querySelector('.rw-toggle-fullscreen-button')
                    // 所以需要使用setTimeout()來讓執行時間不同步以獲取document.querySelector('.rw-toggle-fullscreen-button')並添加語音播放按鈕
                    setTimeout(() => {
                      // 添加語音播放按鈕至聊天室窗上
                      if (document.querySelector('.rw-chat-open')) {
                        document
                          .querySelector('.rw-toggle-fullscreen-button')
                          .insertAdjacentElement('beforebegin', voiceBtn);
                      }
                    }, 0);
                  },
                  // 關閉聊天室窗事件
                  "onChatClose": () => {
                    // 刪除audio html tag
                    if(document.querySelector('#botResVoice')){
                      document.querySelector('#botResVoice').remove()
                    }
                  }
                }
                */
              },
              null
            );
          }),
          t.insertBefore(e, t.firstChild);
          // 只要重整就刪除對話紀錄
          // window.sessionStorage.clear()
          window.sessionStorage.removeItem("chat_session");
      })();
    </script>
    {{/if}}
    <script
      src='https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js'
      integrity='sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p'
      crossorigin='anonymous'
    ></script>
    <script
      src='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js'
      integrity='sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF'
      crossorigin='anonymous'
    ></script>
  </body>

</html>